package cn.xux.algorithm.leetcode.general.hard;

/**
 * 1994. 好子集的数目
 * 给你一个整数数组 nums 。
 * 如果 nums 的一个子集中，
 * 所有元素的乘积可以表示为一个或多个 互不相同的质数 的乘积，
 * 那么我们称它为 好子集 。
 * <p>
 * 比方说，如果 nums = [1, 2, 3, 4] ：
 * [2, 3] ，[1, 2, 3] 和 [1, 3] 是 好 子集，
 * 乘积分别为 6 = 2*3 ，6 = 2*3 和 3 = 3 。
 * [1, 4] 和 [4] 不是 好 子集，因为乘积分别为 4 = 2*2 和 4 = 2*2 。
 * 请你返回 nums 中不同的 好 子集的数目对 109 + 7 取余 的结果。
 * <p>
 * nums 中的 子集 是通过删除 nums 中一些（可能一个都不删除，也可能全部都删除）
 * 元素后剩余元素组成的数组。如果两个子集删除的下标不同，
 * 那么它们被视为不同的子集。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：nums = [1,2,3,4]
 * 输出：6
 * 解释：好子集为：
 * - [1,2]：乘积为 2 ，可以表示为质数 2 的乘积。
 * - [1,2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。
 * - [1,3]：乘积为 3 ，可以表示为质数 3 的乘积。
 * - [2]：乘积为 2 ，可以表示为质数 2 的乘积。
 * - [2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。
 * - [3]：乘积为 3 ，可以表示为质数 3 的乘积。
 * 示例 2：
 * <p>
 * 输入：nums = [4,2,3,15]
 * 输出：5
 * 解释：好子集为：
 * - [2]：乘积为 2 ，可以表示为质数 2 的乘积。
 * - [2,3]：乘积为 6 ，可以表示为互不相同质数 2 和 3 的乘积。
 * - [2,15]：乘积为 30 ，可以表示为互不相同质数 2，3 和 5 的乘积。
 * - [3]：乘积为 3 ，可以表示为质数 3 的乘积。
 * - [15]：乘积为 15 ，可以表示为互不相同质数 3 和 5 的乘积。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 30
 */
public class TheNumberOfGoodSubsets {

    int mod = 1000000007;

    int[] p = new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29};

    public int numberOfGoodSubsets(int[] nums) {
        //  统计各个数字的个数
        int[] cnt = new int[31];
        for (int num : nums) {
            cnt[num]++;
        }
        // 状态个数为 1<<p.length
        int mask = 1024;
        long[] freq = new long[mask];
        // 设置freq[0]=1，
        // 如此，当某个状态不与其他状态合并，单独成为好子集不需要做特殊处理
        freq[0] = 1;
        for (int i = 2; i < 31; i++) {
            // 将数字转换为状态
            int curr = check(i);
            // cnt[i]==0或者i不能存在于好子集中，则无需考虑
            if (cnt[i] == 0 || curr == -1) {
                continue;
            }
            // 遍历所有当前状态，必须从后往前
            for (int j = mask - 1; j >= 0; j--) {
                if ((j & curr) == 0) {
                    freq[j | curr] = (freq[j | curr] + freq[j] * cnt[i] % mod) % mod;
                }
            }
        }
        long ans = 0;
        for (int i = 1; i < mask; i++) {
            ans = (ans + freq[i]) % mod;
        }
        // 所有1可选择加入或不加入，都不影响是否为好子集
        while (cnt[1]-- > 0) {
            ans = (ans * 2) % mod;
        }
        return (int) ans;
    }

    // 将num转化为状态,值为1~1023，
    // 如果约数包含相同质数(即不能存在于好子集中)，则返回-1
    private int check(int num) {
        if (num % 4 == 0 || num % 9 == 0 || num % 16 == 0 || num % 25 == 0) {
            return -1;
        }
        int ans = 0;
        for (int i = 0; i < 10 && p[i] <= num; i++) {
            if (num % p[i] == 0) {
                ans += (1 << i);
            }
        }
        return ans;
    }

}
