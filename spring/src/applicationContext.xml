<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 配置 bean
        class: bean的全类名，通过反射的方式在IOC容器中创建bean对象，所以要求bean类中必须有无参数的构造器
        id: 标识容器中的bean, id值一定是唯一的
    -->
    <bean id="helloWorld" class="cn.xux.spring.hello.HelloWorld">
        <!-- 属性注释的三种方法之一：setter方法注入 -->
        <property name="name2" value="Spring"></property>
    </bean>

    <bean id="car" class="cn.xux.spring.hello.Car">
        <!-- 属性注释的三种方法之二：构造器注入,。（第三种是工厂方法注入(很少使用，不推荐)） -->
        <constructor-arg value="Audi" index="0"></constructor-arg>
        <constructor-arg value="Shanghai" index="1"></constructor-arg>
        <constructor-arg value="300000" type="double"></constructor-arg>
    </bean>

    <!-- 使用构造器注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器 -->
    <bean id="car2" class="cn.xux.spring.hello.Car">
        <!-- 属性注释的三种方法之二：构造器注入,。（第三种是工厂方法注入(很少使用，不推荐)） -->
        <constructor-arg value="Baoma" type="java.lang.String"></constructor-arg>
        <!-- 如果字面值包含特殊字符可以使用<![CDATA[]]>包裹起来 -->
        <!-- 属性值也可以使用value子节点配置 -->
        <constructor-arg type="java.lang.String">
            <value><![CDATA[<Shanghai^>]]></value>
        </constructor-arg>
        <constructor-arg value="240" type="int"></constructor-arg>
    </bean>

    <bean id="person" class="cn.xux.spring.bean.Person">
        <property name="name" value="Tom"></property>
        <property name="age" value="24"></property>
        <!-- 可以使用property的ref属性或者子节点简历bean之间的引用关系 -->
        <!--<property name="car" ref="car2"></property>-->
        <!--<property name="car">
            <ref bean="car2"></ref>
        </property>-->
        <!--也可以创建一个内部bean，内部bean不能被外部引用，只能在内部使用-->
        <property name="car">
            <bean class="cn.xux.spring.hello.Car">
                <constructor-arg value="Ford"></constructor-arg>
                <constructor-arg value="Changan"></constructor-arg>
                <constructor-arg value="200000" type="double"></constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="person2" class="cn.xux.spring.hello.Person">
        <constructor-arg name="name" value="Jerry"></constructor-arg>
        <constructor-arg name="age" value="30"></constructor-arg>
        <!--<property name="car" ref="car2"></property>-->
        <!--<property name="car">
            <ref bean="car2"></ref>
        </property>-->
        <!--<constructor-arg ref="car"></constructor-arg>-->
        <!--测试赋值null-->
        <!--<constructor-arg><null/></constructor-arg>-->
        <constructor-arg ref="car"></constructor-arg>
        <!--为级联属性赋值 注意：属性需要先初始换后才可以为级联属性赋值，否则会有异常，和Struts2不同-->
        <property name="car.price" value="400000"></property>
        <property name="car.maxSpeed" value="260"></property>
    </bean>

    <!--测试集合list-->
    <bean id="person3" class="cn.xux.spring.bean.collection.Person">
        <property name="name" value="Mike"></property>
        <property name="age" value="45"></property>
        <property name="cars" >
            <!--使用list节点为List类型的属性赋值-->
            <list>
                <ref bean="car"></ref>
                <ref bean="car2"></ref>
                <bean class="cn.xux.spring.hello.Car">
                    <constructor-arg value="Ford"></constructor-arg>
                    <constructor-arg value="Changan"></constructor-arg>
                    <constructor-arg value="200000" type="double"></constructor-arg>
                </bean>
            </list>
        </property>
    </bean>

    <!--测试集合map-->
    <bean id="person4" class="cn.xux.spring.bean.collection.NewPerson">
        <property name="name" value="Rose"></property>
        <property name="age" value="16"></property>
        <property name="cars" >
            <!--使用map及map的entry子节点配置map类型的成员变量-->
            <map>
                <entry key="AA" value-ref="car"></entry>
                <entry key="BB" value-ref="car2"></entry>
            </map>
        </property>
    </bean>

    <!--测试Properties,配置Properties属性值-->
    <bean id="dataSource" class="cn.xux.spring.bean.collection.DataSource">
        <property name="properties">
            <props>
                <prop key="user">root</prop>
                <prop key="password">123456</prop>
                <prop key="user">root</prop>
                <prop key="jdbcUrl">jdbc:mysql://test</prop>
                <prop key="driverClass">com.mysql.jdbc.Driver</prop>
            </props>
        </property>
    </bean>

    <!--配置单例的集合bean，以供多个bean进行引用，需要导入util命名空间-->
    <util:list id="cars">
        <ref bean="car"></ref>
        <ref bean="car2"></ref>
    </util:list>

    <bean id="person5" class="cn.xux.spring.bean.collection.Person">
        <property name="name" value="Clint Eastwood"></property>
        <property name="age" value="89"></property>
        <property name="cars" ref="cars"></property>
    </bean>

    <!--通过p命名空间为bean的属性赋值，相对于传统的配置方式更加简洁-->
    <bean id="person6" class="cn.xux.spring.bean.collection.Person"
          p:age="42" p:name="Smith" p:cars-ref="cars"></bean>

    <!--
        自动装配：可以使用autowire属性指定自动装配的方式。
        byName 根据bean的名字（id）和当前bean的setter的属性名自动装配，若雨匹配的则装配，没有则不装配（null）
        byType  根据bean的类型（class）和当前bean的属性的类型进行自动装配，该类型的bean必须唯一，否则会报错
    -->
    <bean id="person7" class="cn.xux.spring.bean.collection.Person"
          p:age="42" p:name="Smith" autowire="byName"></bean>
    <!--<bean id="person7" class="cn.xux.spring.bean.Person"
          p:age="42" p:name="Smith" autowire="byType"></bean>-->

    <!--<bean id="person8" class="cn.xux.spring.bean.collection.Person"
          p:age="42" p:name="Smith"></bean>-->

    <!--抽象bean：bean的abstract属性为true的bean，这样的bean不能被IOC容器实例化，只能用来被继承配置-->
    <bean id="person8" class="cn.xux.spring.bean.collection.Person"
          p:age="42" p:name="Smith" abstract="true"></bean>

    <!--如果一个bean的calss属性没有指定，则这个bean必须是一个抽象bean，并不是所有的属性都会被继承，比如这里的abstract就不会被继承-->
    <!--<bean id="person8"
          p:age="42" p:name="Smith" abstract="true"></bean>-->

    <!--spring bean的关系：1、继承：使用bean的parent属性指定哪个bean，可以覆盖或者添加属性的值-->
    <bean id="person9" class="cn.xux.spring.bean.collection.Person"
          parent="person8" autowire="byName" p:age="70"></bean>

    <!--要求在配置person10时必须有一个关联的cars，换句话说，person10依赖于cars1这个bean-->
    <bean id="person10" class="cn.xux.spring.bean.collection.Person"
          p:name="Alice" p:age="18" depends-on="cars1"></bean>

    <util:list id="cars1">
        <ref bean="car"></ref>
        <ref bean="car2"></ref>
    </util:list>

</beans>